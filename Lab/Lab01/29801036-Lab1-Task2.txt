FIT2100 Lab01
Name		: Wong Jun Kang
Student ID	: 29801036
Tutor		: Dr Ting Tin Tin
Lab Group	: Wednesday 8am-11am



3.2 Task 2 (4 marks)
Enter the following program into a le named task2.c. Using gcc, compile two slightly different executables from your task2.c le. The rst executable, named task2, should be compiled as normal. The second executable,
 named task2-with-g, should be compiled using the -g option from the table in section 2.7.2 above. 

Then, answer the following questions (in bold text):

(a) Compare the file size of the two executables generated (try ls -lh to see the le sizes in `human' format). Why is one file larger than the other?

- File size with -o option (Normal) - 17KB
- File size with -g option - 19KB

File size with -o option (Normal) is 2 KB smaller compared to file size of executable created by -g option. This is because the c program that we compiled has errors and the file generated by option -g embed debugging 
information inside the executable file while file generated by -o command does not contain any debugging information which results in the difference in file size.




(b) You may have seen one or more warning messages. With good reason! While gcc is able to compile your code, the code is unlikely to run correctly, and may randomly produce a segmentation fault due to trying to access memory 
in an incorrect way. Reading the warning messages, identify the line number and column number of the place in your source code that triggered the warning. (You do not need to x the code at this stage.)

c:5:16
Line number:5, Column number: 16




(c) Run your task2 executable through valgrind. Be patient, valgrind is much slower than running your program natively! Interact with your program and also read the extra information valgrind spits out. Is the information useful?
Now try running your task2-with-g file instead.

Yes, valgrind spits out information regarding HEAP summary and memory leaks. It helps us in identifying overflows in memory (stack smashing detected) when we pass ‘N/A’ into a char type variable.



What is the difference in valgrind's output between the two different versions?

The only observable difference in the valgrind’s output between the two versions is the main showing the absolute path for file “task2” but the “task2-with-g”’s main is showing the c source file’s name with the total number of lines 
(i.e.  line number of last line of code) in the c file.




(d) What is the program supposed to do? What is the program actually doing? Hint: Warning messages are a good way to understand what the program is doing wrongly. You might want to compare the warnings from the compiler against the
 output from valgrind.

The program was supposed to prompt the user to enter some characters (under length 10) and print “you entered <user input> characters”.The program first assigned ‘N/A’ (detected as int) to the string type variable, however, a single 
character was expected by the program’s string variable (char string) and ‘’ (single quotation), and since ‘N/A’ (more than 1 character inside a single. The number ‘5123905’ is the decimal representation of ‘N/A’. The binary 
representation of ‘5123905’ is “01001110 00101111 01000001” which is 3 bytes large, and char (‘’) is only 1 byte large, hence it overflows.